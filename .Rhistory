install.packages('oro.dicom')
library(oro.dicom)
file <- here::here('data','BRAINIX','DICOM','FLAIR','Data/BRAINIX/DICOM/FLAIR/IM-0001-0001.dcm')
slice = readDICOM(file)
file
file <- here::here('data','BRAINIX','DICOM','FLAIR','IM-0001-0001.dcm')
slice = readDICOM(file)
class(slice)
names(slice)
class(slice$hdr)
class(slice$img)
class(slice$hdr[[1]])
class(slice$img[[1]])
dim(slice$img[[1]])
hdr <- slice$hdr[[1]]
slice$hdr
hdr
dim(hdr)
dim(slice$hdr)
names(hdr)
#extract resolution
hdr[hdr$name == "PixelSpacing","Value"]
#extract resolution
hdr[hdr$name == "PixelSpacing", "Value"]
#extract resolution
hdr[hdr$name == "PixelSpacing", "value"]
hdr[hdr$name == 'FlipAngle'.]
hdr[hdr$name == 'FlipAngle',]
# Read all T1 image
file <- here::here('data','BRAINIX','DICOM','T1')
T1_image <- slice = readDICOM(file)
T1_image <- readDICOM(file)
dim(T1_image)
dim(T1_image[[1]])
dim(T1_image[[11]])
dim(T1_image$img[[1]])
hdr <- T1_image$hdr[[1]]
hdr[hdr$name == "PixelSpacing", "value"]
#convert DICOM into NIfTI
nii_T1 <- dicom2nifti(T1_image)
d<=dim(nii_T1)
d<-dim(nii_T1)
d
class(nii_T1)
#visualise one slice
image(1:d[1],1:d[2],nii_T1[, , 1], col = gray(0:64/64),
xlab ="",ylab="")
#visualise one slice
image(1:d[1],1:d[2],nii_T1[, , 1], col = gray(0:64/64),
xlab ="",ylab="")
#visualise one slice
image(1:d[1],1:d[2],nii_T1[, , 11], col = gray(0:64/64),
xlab ="",ylab="")
#write the NIfTI file
file <- here::here('data','BRAINIX','NIfTI','Output_3D_file')
#write the NIfTI file
file <- here::here('data','BRAINIX','NIfTI','Output_3D_file')
oro.nifti::writeNIfTI(nim=nii_T1,filename=file)
#check
list.files(here::here('data','BRAINIX','NIfTI'),pattern = 'Output_3D_file')
nii_T2 <- oro.nifti::readNIfTI(here::here('data','BRAINIX','NIfTI','T2.nii.gz'),
reorient = FALSE)
dim(nii_T2)
file <- here::here('data','BRAINIX','NIfTI','Output_3D_file.nii.gz')
oro.nifti::readNIfTI(file,reorient = FALSE)
nii_T1<-oro.nifti::readNIfTI(file,reorient = FALSE)
d <- dim(nii_T1)
d
#Visualise one slice
image(1:d[1],1:d[1],nii_T1[, ,1],xlab = '',ylab = '')
#Visualise one slice
image(1:d[1],1:d[1],nii_T1[, ,11],xlab = '',ylab = '')
graphics::image
heat.colors(12)
#by default R uses heat colors
#reset in gray scale
image(nii_T1,z=11,plot.type ='single')
#by default R uses heat colors
#reset in gray scale
oro.nifti::image(nii_T1,z=11,plot.type ='single')
#show all slices
oro.nifti::image(nii_T1)
#show all slices
oro.nifti::image(nii_T1)
#orthographic view
oro.nifti::orthographic(nii_T1,xyz = c(200,200,11))
#plot on two subplots
par(mfrow = c(1,2))
file <- here::here('data','BRAINIX','NIfTI','Output_3D_file.nii.gz')
nii_T1<-oro.nifti::readNIfTI(file,reorient = FALSE)
d <- dim(nii_T1)
#plot on two subplots (1 row 2 columns)
par(mfrow = c(1,2))
#set margins
o<-par(mar=c(4,4,0,0))
hist(nii_T1,breaks = 75,prob=T,xlab='T1 intensities',
ylab = 'Density', col = rgb(0,0,1,1/2),main='Unthresholded')
hist(nii_T1>20,breaks = 75,prob=T,xlab='T1 intensities > 20',
ylab = 'Density', col = rgb(0,0,1,1/2),main='Thresholded')
hist(nii_T1[niiT1>20],breaks = 75,prob=T,xlab='T1 intensities > 20',
ylab = 'Density', col = rgb(0,0,1,1/2),main='Thresholded')
hist(nii_T1[nii_T1>20],breaks = 75,prob=T,xlab='T1 intensities > 20',
ylab = 'Density', col = rgb(0,0,1,1/2),main='Thresholded')
#BACKMAPPING one slice (some sort of thresholding)
#selection criteria
is_btw_300_400 <- (nii_T1>=300 & nii_T1<=400)
#BACKMAPPING one slice (some sort of thresholding)
#selection criteria
is_btw_300_400 <- (nii_T1>300 & nii_T1<400)
nii_T1_mask <- nii_T1
nii_T1_mask[!is_btw_300_400] <= NA
oro.nifti::overlay(nii_T1,nii_T1_mask,z=11,plot.type='single')
is_btw_300_400
a = rnorm(20,0,1)
a
(a>0 & a<0.5)
nii_T1_mask[!is_btw_300_400] <- NA
oro.nifti::overlay(nii_T1,nii_T1_mask,z=11,plot.type='single')
oro.nifti::overlay(nii_T1,nii_T1_mask)
#ortographics
oro.nifti::orthographic(nii_T1,nii_T1_mask,xyz=c(200,200,11),
text="Image overlaid with mask",
text.cex = 1.5)
